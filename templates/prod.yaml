version: '3'

###
# Fin Server from deployed DockerHub container images
###
services:

  ###
  # Front end apache server for proxying to gateway from host port
  ###
  lb:
    image: {{LB_IMAGE_NAME}}:{{FIN_TAG}}
    ports:
      - ${HOST_PORT:-3000}:80
    restart: unless-stopped

  ###
  # Font End NodeJS Application Server
  ###
  gateway:
    image: {{UCD_DAMS_SERVER_IMAGE_NAME}}:{{APP_TAG}}
    volumes:
      - fedora-data:/data
      - ${GCLOUD_SERVICE_ACCOUNT_MOUNT:-./service-account.json}:/etc/fin/service-account.json
    env_file:
      - .env
    depends_on:
      - fcrepo
      - redis
      - elasticsearch
    restart: unless-stopped
    command: npm run gateway

  ###
  # Fedora Repository
  ###
  fcrepo:
    image: {{DAMS_FCREPO_IMAGE_NAME}}:{{APP_TAG}}
    ports:
      - ${FCREPO_HOST_PORT:-8080}:8080
    volumes:
      - fedora-data:/usr/local/tomcat/fcrepo-home/data
      - activemq-data:/usr/local/tomcat/ActiveMQ
      - ${GCLOUD_SERVICE_ACCOUNT_MOUNT:-./service-account.json}:/etc/fin/service-account.json
    env_file:
      - .env
    restart: unless-stopped

  ###
  # Fedora Postgres Service
  ###
  postgres:
    image: {{POSTGRES_IMAGE_NAME}}:{{FIN_TAG}}
    environment: 
      - POSTGRES_HOST_AUTH_METHOD=trust
    volumes:
      - pg-data:/var/lib/postgresql/data
    restart: unless-stopped

  ###
  # Fin Init Service
  ###
  init:
    image: {{UCD_DAMS_INIT_IMAGE_NAME}}:{{APP_TAG}}
    env_file:
      - .env

  ###
  # Session, admin store
  ###
  redis:
    image: redis:3.2
    volumes:
      - redis-data:/data
    depends_on:
      - fcrepo

  ###
  # RabbitMQ - for messaging
  ###
  rabbitmq:
    image: {{RABBITMQ_IMAGE_NAME}}:{{APP_TAG}}
    ports:
      - 15672:15672
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq

  ###
  # UC DAMS Client API
  ###
  api:
    image: {{UCD_DAMS_SERVER_IMAGE_NAME}}:{{APP_TAG}}
    volumes:
      - ${GCLOUD_SERVICE_ACCOUNT_MOUNT:-./service-account.json}:/etc/fin/service-account.json
    env_file:
      - .env
    depends_on:
      - elasticsearch
    restart: unless-stopped
    command: npm run api

  finac:
    image: {{UCD_DAMS_SERVER_IMAGE_NAME}}:{{APP_TAG}}
    volumes:
      - ${GCLOUD_SERVICE_ACCOUNT_MOUNT:-./service-account.json}:/etc/fin/service-account.jso
    env_file:
      - .env
    restart: unless-stopped
    command: node fin-ac/index.js

  ###
  # UC DAMS Client UI
  ###
  ucd-lib-client:
    image: {{UCD_DAMS_SERVER_IMAGE_NAME}}:{{APP_TAG}}
    volumes:
      - ${GCLOUD_SERVICE_ACCOUNT_MOUNT:-./service-account.json}:/etc/fin/service-account.json
    env_file:
      - .env
    depends_on:
      - elasticsearch
    restart: unless-stopped
    command: node ucd-lib-client/index.js

  ###
  # External Database Sync Service
  ###
  dbsync:
    image: {{UCD_DAMS_SERVER_IMAGE_NAME}}:{{APP_TAG}}
    volumes:
      - ${GCLOUD_SERVICE_ACCOUNT_MOUNT:-./service-account.json}:/etc/fin/service-account.json
    env_file:
      - .env
    depends_on:
      - gateway
    restart: unless-stopped
    command: npm run dbsync

  ###
  # ES Index Management Service
  ###
  es-index-management:
    image: {{UCD_DAMS_SERVER_IMAGE_NAME}}:{{APP_TAG}}
    volumes:
      - ${GCLOUD_SERVICE_ACCOUNT_MOUNT:-./service-account.json}:/etc/fin/service-account.json
    env_file:
      - .env
    depends_on:
      - gateway
    restart: unless-stopped
    command: npm run es-index-management

  ###
  # GCS - Access & Sync
  ###
  gcs:
    image: {{UCD_DAMS_SERVER_IMAGE_NAME}}:{{APP_TAG}}
    volumes:
      - ${GCLOUD_SERVICE_ACCOUNT_MOUNT:-./service-account.json}:/etc/fin/service-account.json
      - gcs-disk-cache:/etc/gcs-disk-cache
    env_file:
      - .env
    depends_on:
      - gateway
    restart: unless-stopped
    command: npm run gcs

  ###
  # Search
  ###
  elasticsearch:
    image: {{ELASTIC_SEARCH_IMAGE_NAME}}:{{FIN_TAG}}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - es-data:/usr/share/elasticsearch/data
    depends_on:
      - fcrepo

  kibana:
    image: docker.elastic.co/kibana/kibana:8.4.3
    ports:
      - ${KIBANA_HOST_PORT:-5601}:5601
    env_file:
      - .env
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - xpack.security.enabled=false
      - telemetry.enabled=false
    depends_on:
      - elasticsearch
    restart: unless-stopped

  ###
  # Fin Workflows
  ###
  workflow:
    image: {{UCD_DAMS_SERVER_IMAGE_NAME}}:{{APP_TAG}}
    volumes:
      - ${GCLOUD_SERVICE_ACCOUNT_MOUNT:-./service-account.json}:/etc/fin/service-account.json
    env_file:
      - .env
    depends_on:
      - gateway
    restart: unless-stopped
    command: node workflow/index.js

  ###
  # OIDC AuthenticationService
  ###
  oidc:
    image: {{UCD_DAMS_SERVER_IMAGE_NAME}}:{{APP_TAG}}
    volumes:
      - ${GCLOUD_SERVICE_ACCOUNT_MOUNT:-./service-account.json}:/etc/fin/service-account.json
    env_file:
      - .env
    depends_on:
      - gateway
    restart: unless-stopped
    command: npm run oidc

  iiif:
    image: {{IIIF_IMAGE_NAME}}:{{APP_TAG}}
    privileged: true
    # cap_add:
    #   - SYS_ADMIN
    # devices:
    #   - /dev/fuse
    # security_opt:
    #   - seccomp:unconfined
    environment:
      - GOOGLE_APPLICATION_CREDENTIALS=/etc/fin/service-account.json
      - FUSE_DIR=/etc/gcs-fuse/fcrepo/rest
      - GCS_BUCKET=dams-client-media-dev
      - VERBOSITY=5
    volumes:
      - ${GCLOUD_SERVICE_ACCOUNT_MOUNT:-./service-account.json}:/etc/fin/service-account.json
      - gcs-fuse:/etc/gcs-fuse
    ports:
      - 9000:9000
    # command: bash -c "tail -f /dev/null"

  pg-rest:
    image: {{PGREST_IMAGE_NAME}}:{{FIN_TAG}}
    volumes:
      - ${GCLOUD_SERVICE_ACCOUNT_MOUNT:-./service-account.json}:/etc/fin/service-account.json
    env_file:
      - .env
    # command: bash -c "tail -f /dev/null"

###
# Docker data volumes
###
volumes:
  fedora-data:
    driver: local
  activemq-data:
    driver: local
  pg-data:
    driver: local
  es-data:
    driver: local
  redis-data:
    driver: local
  gcs-fuse:
    driver: local
  gcs-disk-cache:
    driver: local
  rabbitmq-data:
    driver: local